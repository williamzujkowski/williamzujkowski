<svg width="800" height="600" 
     xmlns="http://www.w3.org/2000/svg">
    <defs>
        
        <!-- Viewport clipping -->
        <clipPath id="terminalViewport">
            <rect x="0" y="40" width="800" 
                  height="560"/>
        </clipPath>
        
        <!-- Text glow filter -->
        <filter id="textGlow">
            <feGaussianBlur stdDeviation="0.5" result="coloredBlur"/>
            <feMerge>
                <feMergeNode in="coloredBlur"/>
                <feMergeNode in="SourceGraphic"/>
            </feMerge>
        </filter>
    </defs>
    
    <!-- Window -->
    <rect width="800" height="600" 
          rx="8" ry="8" fill="#300a24"/>
    
    <!-- Title bar -->
    <rect width="800" height="40" rx="8" ry="8" fill="#2b2b2b"/>
    <rect y="20" width="800" height="20" fill="#2b2b2b"/>
    
    <!-- Window controls -->
    <circle cx="20" cy="20" r="6" fill="#ff5f56"/>
    <circle cx="40" cy="20" r="6" fill="#ffbd2e"/>
    <circle cx="60" cy="20" r="6" fill="#27c93f"/>
    
    <!-- Title -->
    <text x="400.0" y="25" font-family="Ubuntu Mono, Consolas, Monaco, 'Courier New', monospace" 
          font-size="13" fill="#cccccc" text-anchor="middle">william@ubuntu:~</text>
    
    <!-- Terminal viewport -->
    <g clip-path="url(#terminalViewport)">
        <rect y="40" width="800" 
              height="560" fill="#300a24"/>
        
        <!-- Terminal content area -->
        <g id="terminal-content" transform="translate(10, 50)">
            <!-- Dynamic content will be added here by JavaScript -->
        </g>
        
        <!-- Cursor - always present but moves -->
        <rect id="cursor" x="10" y="50" 
              width="8.4" height="14" 
              fill="#ffffff">
            <animate attributeName="opacity" values="1;1;0;0" 
                     dur="1000ms" repeatCount="indefinite"/>
        </rect>
    </g>
    
    <!-- JavaScript animation engine -->
    <script type="text/javascript"><![CDATA[

// Terminal animation engine
(function() {
    'use strict';
    
    // Configuration
    const config = {"fontSize": 14, "fontFamily": "Ubuntu Mono, Consolas, Monaco, 'Courier New', monospace", "lineHeight": 19.599999999999998, "charWidth": 8.4, "padding": 10, "promptColor": "#87d75f", "textColor": "#ffffff", "typingSpeedMin": 30, "typingSpeedMax": 90, "typingSpeedAvg": 50, "viewportHeight": 540};
    const sequences = [{"type": "command", "prompt": "william@ubuntu:~$ ", "content": "whoami", "output": {"content": "william", "color": "#ffffff"}, "pause": 600}, {"type": "command", "prompt": "william@ubuntu:~$ ", "content": "finger william", "output": {"content": "Login: william         Name: William Zujkowski\nDirectory: /home/william        Shell: /bin/bash\nOn since Sun Jan 19 09:15 (EST) on pts/0 from 192.168.1.42\n\nPlan:\nSoftware Developer | Data Enthusiast | Professional Dad Joke Teller\n35 years of debugging life & code\nPowered by coffee \u2615 and curiosity \ud83d\udd0d", "color": "#ffffff"}, "pause": 1200}, {"type": "command", "prompt": "william@ubuntu:~$ ", "content": "cd /opt/jokes && ls -la", "output": {"content": "total 42\ndrwxr-xr-x  4 william william 4096 Jan 19 14:32 .\ndrwxr-xr-x 12 root    root    4096 Jan 10 10:15 ..\n-rwxr-xr-x  1 william william 2048 Jan 18 16:45 dadjoke\n-rw-r--r--  1 william william  512 Jan 18 16:45 dadjoke.conf\ndrwxr-xr-x  2 william william 4096 Jan 17 11:20 database\n-rwxr-xr-x  1 william william 1337 Jan 19 09:30 groan-meter\n-rw-r--r--  1 william william 8192 Jan 19 14:31 jokes.db\ndrwxr-xr-x  2 william william 4096 Jan 15 13:42 logs\n-rw-r--r--  1 william william  256 Jan 16 08:15 README.md", "color": "#ffffff"}, "pause": 1000}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "./dadjoke --random", "output": {"content": "Loading joke database... [OK]\nSelecting random joke... [OK]\n\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  DAD JOKE #0x2A (Groan Level: MAXIMUM)\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\nQ: Why don't scientists trust atoms?\nA: Because they make up everything!\n\nDelivered: 42,337 times\nEye rolls: 41,998 (99.2%)\nActual laughs: 339 (0.8%)", "color": "#87d75f"}, "pause": 2000}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "ps aux | grep -E '(coffee|code|kids)' | head -5", "output": {"content": "william   1337  15.2  3.7 987654 321098 ?     Ssl  09:15  12:42 /usr/bin/coffee-daemon --strength=maximum\nwilliam   2048  28.5  5.2 876543 456789 pts/0 Sl+  09:16  23:51 /usr/bin/code --debug-life\nwilliam   3072   0.8  1.2 234567  98765 ?     S    09:45   0:42 /home/william/bin/kids-monitor --eye-roll-detection\nwilliam   4096   2.1  2.8 345678 234567 ?     Sl   10:30   1:15 /opt/smart-home/thermostat-guard --temp=72F --immutable\nwilliam  28451   0.0  0.0   9184   2316 pts/1 S+   14:38   0:00 grep --color=auto -E (coffee|code|kids)", "color": "#ffffff"}, "pause": 1200}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "cat /proc/developer/stats", "output": {"content": "Developer Statistics for PID 1000 (william)\n============================================\nUptime: 35 years, 0 days, 0 hours\nCoffee consumed: 25,550 cups (2.0 cups/day avg)\nBugs fixed: 98,234\nBugs created: 98,233 (net positive!)\nStack Overflow visits: 142,857\nStack Overflow contributions: 1,337\nGit commits: 47,892\nMeaningful commit messages: 47,891\n\"Fixed typo\" commits: 1\nDad jokes told: \u221e\nKids who laughed: 0\nWife eye rolls: 12,775\nProjects started: 847\nProjects finished: 42\nRaspberry Pis owned: 17\nSmart home devices: 73\nDevices wife allowed: 72 (thermostat excluded)", "color": "#729fcf"}, "pause": 2500}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "sudo systemctl status dad-mode.service", "output": {"content": "\u25cf dad-mode.service - Dad Mode Joke Delivery System\n     Loaded: loaded (/etc/systemd/system/dad-mode.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sun 2025-01-19 09:15:42 EST; 5h 23min ago\n       Docs: man:dadjoke(8)\n   Main PID: 1337 (dad-joked)\n      Tasks: 4 (limit: 4915)\n     Memory: 42.0M\n        CPU: 13m 37s\n     CGroup: /system.slice/dad-mode.service\n             \u2514\u25001337 /usr/sbin/dad-joked --groan-level=maximum --timing=inopportune\n\nJan 19 14:32:15 ubuntu dad-joked[1337]: Joke delivered to child process 3456\nJan 19 14:32:16 ubuntu dad-joked[1337]: Eye roll detected from PID 3456\nJan 19 14:35:42 ubuntu dad-joked[1337]: Preparing context-appropriate pun...\nJan 19 14:35:43 ubuntu dad-joked[1337]: SUCCESS: Maximum groan achieved", "color": "#ffffff"}, "pause": 1800}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "skill --list | sort -k3 -nr | head -10", "output": {"content": "SKILL                     LEVEL  PROGRESS  LAST_USED\nDad Jokes                  100   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  2 min ago\nPython                      95   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  today\nSQL/Databases               95   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  today\nCoffee Brewing              92   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  15 min ago\nJavaScript/TypeScript       90   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2591  yesterday\nDebugging                   88   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2591  always\nReact/Next.js              85   \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2591  2 days ago\nDocker/Kubernetes          80   \u2593\u2593\u2593\u2593\u2593\u2593\u2591\u2591  last week\nThermostat Negotiation      5   \u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591  daily\nSinging in Shower           3   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  better not", "color": "#87d75f"}, "pause": 1500}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "fortune | cowsay -f tux", "output": {"content": " _________________________________________\n/ A SQL query goes into a bar, walks up   \\\n| to two tables and asks, \"Can I join     |\n\\ you?\"                                   /\n -----------------------------------------\n   \\\n    \\\n        .--.\n       |o_o |\n       |:_/ |\n      //   \\ \\\n     (|     | )\n    /'\\_   _/`\\\n    \\___)=(___/", "color": "#ffff00"}, "pause": 2000}, {"type": "command", "prompt": "william@ubuntu:/opt/jokes$ ", "content": "cd ~/projects && find . -name '*.joke' -type f | wc -l", "output": {"content": "1,337", "color": "#ffffff"}, "pause": 800}, {"type": "command", "prompt": "william@ubuntu:~/projects$ ", "content": "tail -f /var/log/family.log", "output": {"content": "2025-01-19 14:15:32 [INFO] Kid_1 requested snack\n2025-01-19 14:15:45 [INFO] Snack provided: apple slices\n2025-01-19 14:16:02 [WARN] Kid_2 attempting thermostat access\n2025-01-19 14:16:03 [ERROR] Access denied: Temperature is perfect at 72\u00b0F\n2025-01-19 14:18:15 [INFO] Wife suggested new smart home device\n2025-01-19 14:18:16 [INFO] Enthusiasm level: MAXIMUM\n2025-01-19 14:22:47 [DEBUG] Dad joke queued for dinner\n2025-01-19 14:30:12 [INFO] Family movie night initiated\n2025-01-19 14:30:13 [INFO] Popcorn.make() called successfully\n2025-01-19 14:38:55 [INFO] All processes sleeping peacefully\n^C", "color": "#ffffff"}, "pause": 2500}, {"type": "command", "prompt": "william@ubuntu:~/projects$ ", "content": "./groan-meter --analyze --last-joke", "output": {"content": "\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551          GROAN-O-METER\u2122 v3.14159             \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\nAnalyzing last joke delivery...\n\nJoke: \"I used to hate facial hair, but then it grew on me.\"\n\nRecipient Reactions:\n\u251c\u2500 Kid #1: Eye roll duration: 3.7 seconds\n\u251c\u2500 Kid #2: Audible groan detected (62 dB)\n\u251c\u2500 Kid #3: Facepalm registered\n\u2514\u2500 Wife: Smile suppression failed (corner lift: 2.3mm)\n\nOverall Score: 9.6/10 (LEGENDARY)\n\nAchievement Unlocked: \"Maximum Dad Energy\"", "color": "#87d75f"}, "pause": 2000}, {"type": "command", "prompt": "william@ubuntu:~/projects$ ", "content": "echo \"Thanks for visiting! May your code compile and your coffee be strong! \ud83d\ude80\"", "output": {"content": "Thanks for visiting! May your code compile and your coffee be strong! \ud83d\ude80", "color": "#87d75f"}, "pause": 2000}, {"type": "command", "prompt": "william@ubuntu:~/projects$ ", "content": "exit", "output": {"content": "logout\n\nSaving dad joke cache... done\nSyncing groan statistics... done\nBacking up family memories... done\n\nConnection closed.", "color": "#ffffff"}, "pause": 3000}];
    
    // Terminal state
    const terminal = {
        lines: [],           // Array of completed lines
        currentLine: null,   // Current line element being typed
        currentText: '',     // Current line text
        cursorX: 0,          // Cursor position in characters
        cursorY: 0,          // Cursor position in lines
        totalHeight: 0,      // Total height of content
        scrollOffset: 0,     // Current scroll offset
        isTyping: false,     // Currently typing flag
        sequenceIndex: 0,    // Current sequence being processed
        startTime: Date.now()
    };
    
    // Get DOM elements
    const contentGroup = document.getElementById('terminal-content');
    const cursor = document.getElementById('cursor');
    
    // Utility functions
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    function getTypingSpeed() {
        const r = Math.random();
        if (r < 0.1) {
            // 10% chance of pause
            return Math.floor(Math.random() * (500 - 200) + 200);
        } else if (r < 0.3) {
            // 20% chance of slow
            return Math.floor(Math.random() * (config.typingSpeedMax - config.typingSpeedAvg) + config.typingSpeedAvg);
        } else {
            // 70% normal speed
            return Math.floor(Math.random() * (config.typingSpeedAvg - config.typingSpeedMin) + config.typingSpeedMin);
        }
    }
    
    // Create a new text line element
    function createLineElement(y, color) {
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', '0');
        text.setAttribute('y', String(y + config.fontSize));
        text.setAttribute('font-family', config.fontFamily);
        text.setAttribute('font-size', String(config.fontSize));
        text.setAttribute('fill', color || config.textColor);
        text.setAttribute('filter', 'url(#textGlow)');
        return text;
    }
    
    // Update cursor position
    function updateCursor(x, y) {
        cursor.setAttribute('x', String(config.padding + x));
        cursor.setAttribute('y', String(40 + config.padding + y));
    }
    
    // Type a single character
    async function typeCharacter(char) {
        if (!terminal.currentLine) {
            terminal.currentLine = createLineElement(terminal.cursorY * config.lineHeight, config.textColor);
            contentGroup.appendChild(terminal.currentLine);
        }
        
        terminal.currentText += char;
        terminal.currentLine.textContent = terminal.currentText;
        terminal.cursorX++;
        
        updateCursor(terminal.cursorX * config.charWidth, terminal.cursorY * config.lineHeight);
        
        await sleep(getTypingSpeed());
    }
    
    // Type a complete string
    async function typeText(text, color) {
        terminal.currentLine = createLineElement(terminal.cursorY * config.lineHeight, color);
        contentGroup.appendChild(terminal.currentLine);
        terminal.currentText = '';
        terminal.cursorX = 0;
        
        for (let i = 0; i < text.length; i++) {
            terminal.currentText = text.substring(0, i + 1);
            terminal.currentLine.textContent = terminal.currentText;
            terminal.cursorX = i + 1;
            
            updateCursor(terminal.cursorX * config.charWidth, terminal.cursorY * config.lineHeight);
            
            await sleep(getTypingSpeed());
        }
    }
    
    // Print a line instantly (for output)
    async function printLine(text, color) {
        const line = createLineElement(terminal.cursorY * config.lineHeight, color);
        line.textContent = text;
        contentGroup.appendChild(line);
        
        terminal.lines.push(line);
        terminal.currentLine = null;
        terminal.currentText = '';
        terminal.cursorX = 0;
        terminal.cursorY++;
        
        // Check if we need to scroll
        await checkScroll();
        
        updateCursor(0, terminal.cursorY * config.lineHeight);
        
        await sleep(20); // Small delay between output lines
    }
    
    // Move to next line
    async function newLine() {
        if (terminal.currentLine) {
            terminal.lines.push(terminal.currentLine);
        }
        
        terminal.currentLine = null;
        terminal.currentText = '';
        terminal.cursorX = 0;
        terminal.cursorY++;
        
        await checkScroll();
        
        updateCursor(0, terminal.cursorY * config.lineHeight);
    }
    
    // Check and perform scrolling if needed
    async function checkScroll() {
        const visibleLines = Math.floor(config.viewportHeight / config.lineHeight);
        
        if (terminal.cursorY >= visibleLines) {
            // Need to scroll
            terminal.scrollOffset += config.lineHeight;
            
            // Animate the scroll
            const currentTransform = contentGroup.getAttribute('transform');
            const newTransform = `translate(${config.padding}, ${40 + config.padding - terminal.scrollOffset})`;
            
            // Simple scroll animation
            contentGroup.setAttribute('transform', newTransform);
            
            await sleep(150); // Scroll animation time
        }
    }
    
    // Process a command sequence
    async function processCommand(sequence) {
        const prompt = sequence.prompt || '$ ';
        const command = sequence.content || '';
        
        // Type prompt instantly
        terminal.currentLine = createLineElement(terminal.cursorY * config.lineHeight, config.promptColor);
        terminal.currentLine.textContent = prompt;
        contentGroup.appendChild(terminal.currentLine);
        terminal.currentText = prompt;
        terminal.cursorX = prompt.length;
        
        updateCursor(terminal.cursorX * config.charWidth, terminal.cursorY * config.lineHeight);
        
        // Type command character by character
        for (let i = 0; i < command.length; i++) {
            terminal.currentText += command[i];
            terminal.currentLine.textContent = terminal.currentText;
            terminal.cursorX++;
            
            updateCursor(terminal.cursorX * config.charWidth, terminal.cursorY * config.lineHeight);
            
            await sleep(getTypingSpeed());
        }
        
        // Move to next line after command
        await newLine();
        
        // Process output if present
        if (sequence.output) {
            await sleep(200); // Small delay before output
            
            const outputLines = sequence.output.content.split('\n');
            const outputColor = sequence.output.color || config.textColor;
            
            for (const line of outputLines) {
                await printLine(line, outputColor);
            }
        }
    }
    
    // Process all sequences
    async function processSequences() {
        for (const sequence of sequences) {
            // Add initial delay if specified
            if (sequence.delay) {
                await sleep(sequence.delay);
            }
            
            // Process based on type
            switch (sequence.type) {
                case 'command':
                    await processCommand(sequence);
                    break;
                    
                case 'text':
                case 'output':
                    const lines = sequence.content.split('\n');
                    const color = sequence.color || config.textColor;
                    for (const line of lines) {
                        await printLine(line, color);
                    }
                    break;
                    
                case 'ascii':
                    const asciiLines = sequence.content.split('\n');
                    const asciiColor = sequence.color || config.textColor;
                    for (const line of asciiLines) {
                        await printLine(line, asciiColor);
                    }
                    break;
            }
            
            // Pause after sequence
            const pause = sequence.pause || 600;
            await sleep(pause);
        }
    }
    
    // Start the animation
    setTimeout(() => {
        processSequences().catch(console.error);
    }, 100);
})();

    ]]></script>
</svg>